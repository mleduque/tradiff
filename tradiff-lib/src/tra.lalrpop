use crate::tra_structs::{ExplicitTraEntry, TraComment, TraEntry, TraEntryContent, TraFragment, WeiduString, WeiduStringLit};
use lalrpop_util::{ErrorRecovery};
use crate::token::{Token, LexError};


grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token, LexError>>);

extern {
    type Location = usize;
    type Error = LexError;

    enum Token {
        "id" => Token::Id(<i64>),
        "equal" => Token::Equal,
        "concat" => Token::OperatorConcat,
        "ftildes" => Token::FiveTildesString(<String>),
        "tilde" => Token::TildeString(<String>),
        "dquote" => Token::DoubleQuoteString(<String>),
        "percent" => Token::PercentString(<String>),
        "eol_cmt" => Token::EndOfLineComment(<String>),
        "encl_cmt" => Token::EnclosedComment(<String>),
        "soundref" => Token::SoundRef(<String>),
        "tlkref" => Token::TlkRef(<u64>),
    }
}

WeiduStringLit : WeiduStringLit = {
    "tilde" => WeiduStringLit::Tilde(<>),
    "dquote" => WeiduStringLit::DoubleQuote(<>),
    "percent" => WeiduStringLit::Percent(<>),
    "ftildes" => WeiduStringLit::FiveTildes(<>),
};

WeiduString: WeiduString = {
    WeiduStringLit => WeiduString::Literal(<>),
    <s1: WeiduString> "concat" <s2: WeiduStringLit> => WeiduString::Concat(Box::new(s1), Box::new(s2))
};

GenderSpec: (WeiduString, Option<String>) =
    <value: WeiduString> <sound: "soundref"?> => (value, sound);

TraEntry: TraEntry = {
    <id:"id"> "equal" <male: GenderSpec ><female: GenderSpec?> => TraEntry {
        id,
        content: TraEntryContent::Explicit(ExplicitTraEntry {
            value: male.0,
            sound: male.1,
            alt_value: female.clone().map(|ref female| female.0.clone()),
            alt_sound: female.map(|female| female.1).flatten(),
        }),
    },
    <id:"id"> "equal" <other: "id"> => TraEntry {
        id,
        content: TraEntryContent::At(other),
    },
    <id:"id"> "equal" <tlkref: "tlkref"> => TraEntry {
        id,
        content: TraEntryContent::Tlk(tlkref),
    },
};

TraComment: TraComment = {
    "eol_cmt" => TraComment::EndOfLine(<>),
    "encl_cmt" => TraComment::Enclosed(<>),
};

TraFragment: TraFragment = {
    TraEntry => TraFragment::Entry(<>),
    TraComment => TraFragment::Comment(<>),
    <e:!> => {
        errors.push(e);
        TraFragment::Error
    },
};

pub TraFile: Vec<TraFragment> = <TraFragment*> => <>;
